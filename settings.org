#+TITLE: Literate Emacs Configuration
#+AUTHOR: Peter Schmiedeskamp
#+EMAIL: peter@thoughtspot.net

* Overview
This document serves as my primary emacs configuration file; it uses
[[http://orgmode.org/worg/org-contrib/babel/][org-babel]] to mix documentation and code in the same file. I chose this
approach because my ~init.el~ file was beginning to get large and
unweildy, and because I was starting to forget the details of why and
how I had configured things.

This document hasn't entirely done away with ~init.el~. The version of
that file included in this repository is a stub, with only the bare
minimum code required to bootstrap. Please consult that file for more
detail, but basically the boostrap:

1. Starts the emacs server
2. Loads org-mode
3. Loads this file

Installation of these configuration files is simple. If you're not me,
 I recommend [[https://help.github.com/articles/fork-a-repo/][forking this repository]] before cloning it to your home
 directory.

* Install packages at startup if needed

#+BEGIN_SRC emacs-lisp
    ;; Set up the melpa package repository
    (require 'package)
    (setq package-user-dir "~/.emacs.d/elpa/")
    (add-to-list 'package-archives
                 '("melpa" . "http://melpa.org/packages/") t)
    (add-to-list 'package-archives
                 '("melpa-stable" . "http://stable.melpa.org/packages/") t)

    (package-initialize)
    (when (not package-archive-contents)
      (package-refresh-contents))

    ;; packages to install
    (defvar my-packages '(exec-path-from-shell
                          better-defaults
                          ido-ubiquitous
                          smex
                          paredit
                          ess
                          graphviz-dot-mode
                          auctex-latexmk
                          tangotango-theme
                          auto-complete
                          markdown-mode
                          markdown-mode+
                          auctex
                          racket-mode
                          haskell-mode
                          ghc
                          ghci-completion
                          cider
                          scion
                          pandoc-mode
                          magit
                          sx)
      "A list of packages to ensure are installed at launch.")

    ;; Iterate list of packages and install
    (dolist (p my-packages)
      (when (not (package-installed-p p))
        (package-install p)))
#+END_SRC

* OSX path fix
OSX paths have been broken on and off due to the way profile
information is stored both in Apple netinfo database as well as in the
more traditional locations. This makes things sane again.

#+BEGIN_SRC emacs-lisp
  (when (memq window-system '(mac ns))
    (exec-path-from-shell-initialize))
#+END_SRC

* Aesthetics and behaviors
** Color theme
I tend to prefer light, high-contrast color themes to the more
hacker-chic low contrast dark themes. The built-in Emacs theme is
pretty good, but leuven is better and is particularly nice with
org-mode. Twilight is my favorite when wallowing in darkness. I've
also been known to dabble in solarized for Solaris nostalgia reasons.

#+BEGIN_SRC emacs-lisp
  ;; Pick a theme. Choose wisely.
  ;; (load-theme 'leuven t)                 ; leuven is light
  ;; (load-theme 'twilight t)               ; twilight is dark
  (load-theme 'tangotango t)              ; tangotango is also dark
#+END_SRC
** Disable welcome screen
#+BEGIN_SRC emacs-lisp
  (setq inhibit-startup-message t)
#+END_SRC
** Default font
I like =Source Code Pro= for my monospaced font. The easiest way to
get this via homebrew cask (don't forget to ~brew tap caskroom/fonts~
before installing).

#+BEGIN_SRC emacs-lisp
;; Default font
(set-face-attribute 'default nil :family "Terminus" :height 120)
#+END_SRC
** Focus follows mouse
#+BEGIN_SRC emacs-lisp
  (setq mouse-autoselect-window t)
#+END_SRC
** Default window size
I tend to use a tiling window manager these days, so this is less
important to me than it used to be. Otherwise, this will intelligently
set a sane window size.

#+BEGIN_SRC emacs-lisp
(defun set-frame-size-according-to-resolution ()
  (interactive)
  (if (display-graphic-p)
  (progn
    ;; use 120 char wide window for largeish displays
    ;; and smaller 80 column windows for smaller displays
    ;; pick whatever numbers make sense for you
    (if (> (x-display-pixel-width) 1920)
           (add-to-list 'default-frame-alist (cons 'width 120))
           (add-to-list 'default-frame-alist (cons 'width 80)))
    ;; for the height, subtract a couple hundred pixels
    ;; from the screen height (for panels, menubars and
    ;; whatnot), then divide by the height of a char to
    ;; get the height we want
    (add-to-list 'default-frame-alist
         (cons 'height (/ (- (x-display-pixel-height) 55)
                             (frame-char-height)))))))

(set-frame-size-according-to-resolution)
#+END_SRC

** Toolbar disable / menubar enable
#+BEGIN_SRC emacs-lisp
(tool-bar-mode -1) ; clickable icons bad
(menu-bar-mode 1) ; dropdown menus good
#+END_SRC

** Silence the audible bell

#+BEGIN_SRC emacs-lisp
(setq ring-bell-function 'ignore)
#+END_SRC

** Line overlap when paging up and down screens

#+BEGIN_SRC emacs-lisp
(setq next-screen-context-lines 4)
#+END_SRC

** Mouse scrolling
#+BEGIN_SRC emacs-lisp
  (setq mouse-wheel-scroll-amount '(1 ((shift) . 1))) ; one line at a time
  (setq mouse-wheel-progressive-speed nil) ; don't accelerate scrolling
  (setq mouse-wheel-follow-mouse 't)       ; scroll window under mouse
  (setq scroll-step 1)              ; keyboard scroll one line at a time
#+END_SRC

** Spell-checking
Aspell seems to be the best here. Homebrew install with ~brew install
--with-lang-en~ for English speakers.
#+BEGIN_SRC emacs-lisp
(if (file-exists-p "/usr/local/bin/aspell")
    (progn
      (setq ispell-program-name "aspell")
      (eval-after-load "ispell"
        '(progn (defun ispell-get-coding-system () 'utf-8)))))
#+END_SRC

* Auto-completions and miscellaneous conveniences
** Recent file list
#+BEGIN_SRC emacs-lisp
(require 'recentf)
(recentf-mode 1)
(setq recentf-max-menu-items 50)
(global-set-key "\C-x\ \C-r" 'recentf-open-files)
#+END_SRC



** Function to insert a date
#+BEGIN_SRC emacs-lisp
(defun esk-insert-date ()
  "Insert a time-stamp according to locale's date and time format."
  (interactive)
  (insert (format-time-string "%Y-%m-%d" (current-time))))
#+END_SRC




** Auto-completions -- ido/smex
#+BEGIN_SRC emacs-lisp
  (ido-mode t)
  (setq ido-everywhere t)
  (setq ido-enable-flex-matching t)
  (global-set-key (kbd "C-x C-r") 'ido-recentf-open)

  (defun ido-recentf-open ()
    "Use `ido-completing-read' to \\[find-file] a recent file"
    (interactive)
    (if (find-file (ido-completing-read "Find recent file: " recentf-list))
        (message "Opening file...")
      (message "Aborting")))

  (global-set-key (kbd "M-x") 'smex)
  (global-set-key (kbd "M-X") 'smex-major-mode-commands)
  ;; This is your old M-x.
  (global-set-key (kbd "C-c C-c M-x") 'execute-extended-command)
#+END_SRC

* Org-mode / org-babel / org-pages setup

** Indentation
Be smarter about indenting behavior (see [[http://emacswiki.org/emacs/LineWrap][the emacs wiki page]]).
#+BEGIN_SRC emacs-lisp
  (setq org-startup-indented t)
#+END_SRC

** Keybindings
Set some /global/ keybindings and parameters for org-mode.
#+BEGIN_SRC emacs-lisp
  (add-hook 'org-mode-hook 'turn-on-font-lock) ; not needed when
                                          ; global-font-lock-mode
                                          ; is on
  (add-hook 'org-mode-hook 'turn-on-auto-fill) ; Autofill
  (add-hook 'org-mode-hook (lambda () (flyspell-mode 1))) ; spellcheck

  ;; Set a catch-all notes file for life and miscellaneous
  (setq org-default-notes-file "~/Desktop/notes.org")

  ;; Global key bindings
  (define-key global-map "\C-cc" 'org-capture)
  (global-set-key "\C-cl" 'org-store-link)
  (global-set-key "\C-ca" 'org-agenda)
  (global-set-key "\C-cb" 'org-iswitchb)
#+END_SRC

** Babel config
#+BEGIN_SRC emacs-lisp
    ;; active Org Babel languages
    (org-babel-do-load-languages
     'org-babel-load-languages
     '((R . t)
       (emacs-lisp . t)
       ;; (julia . t)
       (dot . t)
       (sh . t)
       (latex . t)
       (python . t)
       (sql . t)
       (sqlite . t)
       (ditaa .t)
       (scheme .t)))

    ;; Org babel inline images
    (add-hook 'org-babel-after-execute-hook 'org-display-inline-images)   
    (add-hook 'org-mode-hook 'org-display-inline-images)
    (setq org-confirm-babel-evaluate nil)

    ;; Enter dot-mode when editing graphviz dot files
    (add-to-list 'org-src-lang-modes (quote ("dot" . graphviz-dot)))

    ;; booktabs tables
    (setq org-export-latex-tables-hline "\\midrule")
    (setq org-export-latex-tables-tstart "\\toprule")
    (setq org-export-latex-tables-tend "\\bottomrule")

    ;; use latexmk to compile latex sources
    (setq org-latex-pdf-process (list "latexmk -f -pdf %f"))
#+END_SRC


* ESS - Emacs Speaks Statistics (R, Julia)
#+BEGIN_SRC emacs-lisp
  (require 'ess-site) ; load the package
#+END_SRC
** R
Fix indentation when using fun operators like ~+~ with ggplot and ~%>~ from =magrittr=.
#+BEGIN_SRC emacs-lisp
  ;; (add-hook 'ess-mode-hook
  ;;           (lambda ()
  ;;             (setq ess-first-continued-statement-offset 2)
  ;;             (setq ess-continued-statement-offset 0)))
  (ess-toggle-underscore nil)
#+END_SRC

* Clojure
#+BEGIN_SRC emacs-lisp
  (add-hook 'cider-mode-hook #'eldoc-mode)
  (add-hook 'clojure-mode-hook (lambda () (paredit-mode 1)))
  (setq nrepl-log-messages t)
  (setq nrepl-hide-special-buffers t)
#+END_SRC
* Python
This configuration assumes ipython is installed. This should probably
be revisited, as its been a while since I've looked into the "right"
way of doing things.

#+BEGIN_SRC emacs-lisp
(setq
 python-shell-interpreter "ipython"
 python-shell-interpreter-args ""
 python-shell-prompt-regexp "In \\[[0-9]+\\]: "
 python-shell-prompt-output-regexp "Out\\[[0-9]+\\]: "
 python-shell-completion-setup-code
   "from IPython.core.completerlib import module_completion"
 python-shell-completion-module-string-code
   "';'.join(module_completion('''%s'''))\n"
 python-shell-completion-string-code
   "';'.join(get_ipython().Completer.all_completions('''%s'''))\n")
#+END_SRC
* Haskell
Configure Haskell.
#+BEGIN_SRC emacs-lisp
  (add-hook 'haskell-mode-hook 'turn-on-haskell-indentation)
  (add-hook 'haskell-mode-hook 'turn-on-hi2)
  (add-hook 'haskell-mode-hook #'hindent-mode)

  (eval-after-load 'haskell-mode
    '(define-key haskell-mode-map [f8] 'haskell-navigate-imports))

  (let ((my-cabal-path (expand-file-name "~/.cabal/bin")))
    (setenv "PATH" (concat my-cabal-path ":" (getenv "PATH")))
    (add-to-list 'exec-path my-cabal-path))
  (custom-set-variables '(haskell-tags-on-save t))
  (setq haskell-process-path-cabal "~/.cabal/bin/cabal")
#+END_SRC
* Racket
#+BEGIN_SRC emacs-lisp
  (add-hook 'racket-mode-hook (lambda () (paredit-mode 1)))
#+END_SRC

* Scala
#+BEGIN_SRC emacs-lisp
  (use-package ensime
               :ensure t
               :pin melpa-stable)

#+END_SRC
* Emacs lisp
#+BEGIN_SRC emacs-lisp
  (add-hook 'emacs-lisp-mode-hook (lambda () (paredit-mode 1)))

#+END_SRC
* LaTeX / AucTeX
#+BEGIN_SRC emacs-lisp
(add-hook 'LaTeX-mode-hook 'visual-line-mode)
(add-hook 'LaTeX-mode-hook 'flyspell-mode)
(add-hook 'LaTeX-mode-hook 'LaTeX-math-mode)
(add-hook 'LaTeX-mode-hook 'orgtbl-mode)
;; Compile LaTeX to PDF by default
(add-hook 'TeX-mode-hook '(lambda () (setq TeX-command-default "LaTeXmk")))
(add-hook 'LaTeX-mode-hook '(lambda () (setq compile-command "latexmk -pdf")))
#+END_SRC
# * Email 
# This one was a bit involved to set up. In this repository is a
# directory, =mu4e= that contains corresponding configuration files for
# offlineimap. This program does the heavy lifting for the mu4e
# package. I've added a makefile to that directory which will copy the
# dot-files into the right place (clearly this repository is destined to
# be phased out in favor of a more comprehensive dot-files setup).

# In addition, mu must be built with ~--with-emacs~ option if using
# homebrew on OSX. Sometimes this build tries to build mu4e against the
# emacs bundled with OSX. That's bad. Try setting the emacs environment
# variable before getting started.

# ** Mailbox locations and message filing behaviors
# #+BEGIN_SRC emacs-lisp
#   (require 'mu4e)
#   ;; don't save message to Sent Messages, Gmail/IMAP takes care of this
#   (setq mu4e-sent-messages-behavior 'delete)
#   ;; Gmail also has its own strategy for trash
#   (setq mu4e-trash-messages-behavior 'delete)
#   (setq mu4e-get-mail-command "/usr/bin/offlineimap")
#   (setq mu4e-mu-binary "/usr/local/bin/mu")
#   (setq mu4e-maildir "~/Maildir") ;; top-level Maildir
#   (setq mu4e-sent-folder "/LocalOnly/Sent") ; These are not really important
#   (setq mu4e-drafts-folder "/LocalOnly/Drafts") ; as gmail does its own accounting
#   (setq mu4e-trash-folder "/LocalOnly/Trash") ; these just shut up mu4e
#   (setq mu4e-user-mail-address-list (list "peter@thoughtspot.net"))

#   ;; Default accunt to send from
#   (setq user-mail-address "peter@thoughtspot.net")

# #+END_SRC

# ** Keyboard shortcuts
# #+BEGIN_SRC emacs-lisp
#   (add-to-list
#    'mu4e-bookmarks
#    '("date:today..now AND NOT flag:trashed" "Today's messages"       ?t))
# #+END_SRC

# ** Email signature
# I like to disable message signatures by default, but you [[http://www.djcbsoftware.nl/code/mu/mu4e/Message-signatures.html][can still
# insert the signature manually]] with =C-c C-w=.
# #+BEGIN_SRC emacs-lisp
#   (setq mu4e-compose-signature-auto-include nil)

#   (setq mu4e-compose-signature
# "
# Sent from my emacs
# ")
# #+END_SRC

# ** Aesthetic / display options
# #+BEGIN_SRC emacs-lisp
#   ;; Use fancy chars
#   (setq mu4e-use-fancy-chars t)

#   ;; Try to display images in mu4e
#   (setq
#    mu4e-view-show-images t
#    mu4e-view-image-max-width 800)

#   ;; Date format
#   (setq mu4e-headers-date-format "%d/%b/%Y %H:%M") 

#   ;; Quitting mu4e
#   (setq message-kill-buffer-on-exit t
#         mu4e-confirm-quit nil)

#   ;; Don't show duplicate messages in searches
#   (setq mu4e-headers-skip-duplicates t)
# #+END_SRC

# ** HTML mail handler
# #+BEGIN_SRC emacs-lisp
#   ;;; Convert rich (HTML) mail to text---tried a lot of converters. Pandoc, FTW.
#   (setq mu4e-html2text-command "pandoc -f html -t plain")

#   ;;; And for super problematic emails view them externally with aV
#   ;;; shortcut
#   (add-to-list 'mu4e-view-actions
#     '("ViewInBrowser" . mu4e-action-view-in-browser) t)
# #+END_SRC


# ** Configure mail composition and sending

# #+BEGIN_SRC emacs-lisp
#   ;; sending mail
#   (setq message-send-mail-function 'smtpmail-send-it
#         starttls-use-gnutls t
#         smtpmail-starttls-credentials
#         '(("smtp.gmail.com" 587 nil nil))
#         smtpmail-auth-credentials
#         (expand-file-name "~/.authinfo.gpg")
#         smtpmail-default-smtp-server "smtp.gmail.com"
#         smtpmail-smtp-server "smtp.gmail.com"
#         smtpmail-smtp-service 587
#         smtpmail-debug-info t)

#   (add-to-list 'mu4e-bookmarks
#                '("maildir:/inbox flag:unread" "Today's news" ?z))

#   ;; Turn on flyspell mode when typing
#   (add-hook 'mu4e-compose-mode-hook
#      (defun my-do-compose-stuff ()
#         "My settings for message composition."
#         (flyspell-mode)))
# #+END_SRC
* OpenPGP / GPG / GNUPG
#+BEGIN_SRC emacs-lisp 
  (setq epg-gpg-program "gpg2")
#+END_SRC
