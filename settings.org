#+TITLE: Literate Emacs Configuration
#+AUTHOR: Peter Schmiedeskamp
#+EMAIL: peter@thoughtspot.net

* Overview
This document serves as my primary emacs configuration file; it uses
[[http://orgmode.org/worg/org-contrib/babel/][org-babel]] to mix documentation and code in the same file. I chose this
approach because my ~init.el~ file was beginning to get large and
unwieldy, and because I was starting to forget the details of why and
how I had configured things.

This document hasn't entirely done away with ~init.el~. The version of
that file included in this repository is a stub, with only the bare
minimum code required to bootstrap. Please consult that file for more
detail, but basically the boostrap:

1. Starts the emacs server
2. Loads org-mode
3. Loads this file

Installation of these configuration files is simple. If you're not me,
 I recommend [[https://help.github.com/articles/fork-a-repo/][forking this repository]] before cloning it to your home
 directory.

* Install packages at startup if needed

#+BEGIN_SRC emacs-lisp
  ;; Set up the melpa package repository
  (require 'package)
  (setq package-user-dir "~/.emacs.d/elpa/")
  (add-to-list 'package-archives
               '("melpa" . "https://melpa.org/packages/") t)
  (package-initialize)
  (when (not package-archive-contents)
    (package-refresh-contents))

  (when (not (package-installed-p 'use-package))
    (package-install 'use-package))
#+END_SRC

* Path fix
Paths have been broken on and off due to the way profile
information is stored both in Apple netinfo database as well as in the
more traditional locations. This makes things sane again.

#+BEGIN_SRC emacs-lisp
  ;;(use-package exec-path-from-shell
  ;;  :ensure t
  ;;  :config
  ;;  (exec-path-from-shell-initialize))
#+END_SRC

* Aesthetics and behaviors
** Color theme
I tend to prefer light, high-contrast color themes to the more
hacker-chic low contrast dark themes. The built-in Emacs theme is
pretty good, but leuven is better and is particularly nice with
org-mode. Tango-tango is my favorite when wallowing in darkness. I've
also been known to dabble in solarized for Solaris nostalgia reasons.

#+BEGIN_SRC emacs-lisp
  (use-package tangotango-theme           ; tangotango is also dark
    :ensure t
    :config
    (load-theme 'tangotango t))
#+END_SRC

** Focus follows mouse
Match the behavior of my beloved XMonad.
#+BEGIN_SRC emacs-lisp
  (setq mouse-autoselect-window t)
#+END_SRC
** Disable welcome screen
#+BEGIN_SRC emacs-lisp
  (setq inhibit-startup-message t)
#+END_SRC
** Default font
I like =Source Code Pro= for my monospaced font. The easiest way to
get this via homebrew cask (don't forget to ~brew tap caskroom/fonts~
before installing). On Ubuntu =Terminus= is easy and good.

#+BEGIN_SRC emacs-lisp
  ;; Default font
  (if (or (equal (system-name) "lanai")
          (equal (system-name) "maui"))
      (set-face-attribute 'default nil :family "Terminus" :height 210) ; MBP is retina
      (set-face-attribute 'default nil :family "Terminus" :height 110))
#+END_SRC
** Focus follows mouse
#+BEGIN_SRC emacs-lisp
  (setq mouse-autoselect-window t)
#+END_SRC

** Toolbar disable / menubar enable / scrollbar
#+BEGIN_SRC emacs-lisp
(tool-bar-mode -1)   ; clickable icons bad
(menu-bar-mode 1)    ; dropdown menus good
(scroll-bar-mode -1) ; scrollbars bad
#+END_SRC

** Silence the audible bell

#+BEGIN_SRC emacs-lisp
(setq ring-bell-function 'ignore)
#+END_SRC

** Line overlap when paging up and down screens

#+BEGIN_SRC emacs-lisp
(setq next-screen-context-lines 4)
#+END_SRC

** Mouse scrolling
#+BEGIN_SRC emacs-lisp
  (setq mouse-wheel-scroll-amount '(1 ((shift) . 1))) ; one line at a time
  (setq mouse-wheel-progressive-speed nil) ; don't accelerate scrolling
  (setq scroll-step 1)              ; keyboard scroll one line at a time
#+END_SRC

** Spell-checking
Aspell seems to be the best here. Homebrew install with ~brew install
--with-lang-en~ for English speakers. Ubuntu via apt. OpenBSD via pkg.
#+BEGIN_SRC emacs-lisp
(if (file-exists-p "/usr/local/bin/aspell")
    (progn
      (setq ispell-program-name "aspell")
      (eval-after-load "ispell"
        '(progn (defun ispell-get-coding-system () 'utf-8)))))
#+END_SRC

** Show matching parens
#+BEGIN_SRC emacs-lisp
(show-paren-mode 1)
#+END_SRC
** Disable tab indent mode
#+BEGIN_SRC emacs-lisp
(setq-default indent-tabs-mode nil)
#+END_SRC
** Paredit
#+BEGIN_SRC emacs-lisp
  (use-package paredit
    :ensure t)
#+END_SRC
* Auto-completions and miscellaneous conveniences
** Helm
#+BEGIN_SRC emacs-lisp
  (use-package helm
    :ensure t
    :bind (("M-x" . helm-M-x)
           ("C-x C-f" . helm-find-files)
           ("C-x b" . helm-buffers-list)
           ("C-x C-r" . helm-recentf))
    :init
    (setq helm-mode-fuzzy-match t)
    (setq helm-completion-in-region-fuzzy-match t)
    (setq helm-recentf-fuzzy-match t)
    (setq helm-M-x-fuzzy-match t))

#+END_SRC

** Function to insert a date
#+BEGIN_SRC emacs-lisp
(defun esk-insert-date ()
  "Insert a time-stamp according to locale's date and time format."
  (interactive)
  (insert (format-time-string "%Y-%m-%d" (current-time))))
#+END_SRC






* Org-mode / org-babel / org-pages setup

** Indentation
Be smarter about indenting behavior (see [[http://emacswiki.org/emacs/LineWrap][the emacs wiki page]]).
#+BEGIN_SRC emacs-lisp
  (setq org-startup-indented t)
#+END_SRC

** Keybindings
Set some /global/ keybindings and parameters for org-mode.
#+BEGIN_SRC emacs-lisp
  (add-hook 'org-mode-hook 'turn-on-font-lock) ; not needed when
                                          ; global-font-lock-mode
                                          ; is on
  (add-hook 'org-mode-hook 'turn-on-auto-fill) ; Autofill
  (add-hook 'org-mode-hook (lambda () (flyspell-mode 1))) ; spellcheck

  ;; Set a catch-all notes file for life and miscellaneous
  (setq org-default-notes-file "~/Desktop/notes.org")

  ;; Global key bindings
  (define-key global-map "\C-cc" 'org-capture)
  (global-set-key "\C-cl" 'org-store-link)
  (global-set-key "\C-ca" 'org-agenda)
  (global-set-key "\C-cb" 'org-iswitchb)
#+END_SRC

** Bullets
Makes headings look more attractive
#+BEGIN_SRC emacs-lisp
    (use-package org-bullets
      :ensure t
      :config
      (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
#+END_SRC

** Fancy TODOs
#+BEGIN_SRC emacs-lisp
  (setq org-todo-keywords '((sequence "☛ TODO(t)" "|"  "✔ DONE(d)")
  (sequence "⚑ WAITING(w)" "|")
  (sequence "|" "✘ CANCELED(c)")))
#+END_SRC
** Babel config
#+BEGIN_SRC emacs-lisp
    ;; active Org Babel languages
    (org-babel-do-load-languages
     'org-babel-load-languages
     '((R . t)
       (emacs-lisp . t)
       ;; (julia . t)
       (dot . t)
       ;; (sh . t)
       (latex . t)
       (python . t)
       (sql . t)
       (sqlite . t)
       (ditaa .t)
       (scheme .t)))

    ;; Org babel inline images
    (add-hook 'org-babel-after-execute-hook 'org-display-inline-images)   
    (add-hook 'org-mode-hook 'org-display-inline-images)
    (setq org-confirm-babel-evaluate nil)

    ;; Enter dot-mode when editing graphviz dot files
    (add-to-list 'org-src-lang-modes (quote ("dot" . graphviz-dot)))

    ;; booktabs tables
    (setq org-export-latex-tables-hline "\\midrule")
    (setq org-export-latex-tables-tstart "\\toprule")
    (setq org-export-latex-tables-tend "\\bottomrule")

    ;; use latexmk to compile latex sources
    (setq org-latex-pdf-process (list "latexmk -f -pdf %f"))
#+END_SRC


* Languages
** ESS - Emacs Speaks Statistics (R, Julia)
#+BEGIN_SRC emacs-lisp
  (use-package ess
               :ensure t
               :bind
               (("C-<right>" . paredit-forward-slurp-sexp)
                ("C-<left>" . paredit-forward-barf-sexp))
               :init
               (setq ess-default-style 'RStudio-)
               (setq ess-smart-S-assign-key "<")
               (electric-pair-mode 1)
               (setq electric-pair-inhibit-predicate
                     `(lambda (c)
                        (if (char-equal c ?\<)
                            t
                          (,electric-pair-inhibit-predicate c)))))


#+END_SRC

** Clojure
#+BEGIN_SRC emacs-lisp
  (use-package cider
    :ensure t
    :init
    (add-hook 'cider-mode-hook #'eldoc-mode)
    (add-hook 'clojure-mode-hook (lambda () (paredit-mode 1)))
    (setq nrepl-log-messages t)
    (setq nrepl-hide-special-buffers t))
#+END_SRC

** Python
This configuration assumes ipython is installed. This should probably
be revisited, as its been a while since I've looked into the "right"
way of doing things.

#+BEGIN_SRC emacs-lisp
    (use-package anaconda-mode
      :ensure t
      :init
      (add-hook 'python-mode-hook 'anaconda-mode)
      (add-hook 'python-mode-hook 'anaconda-eldoc-mode))
#+END_SRC

** Racket
#+BEGIN_SRC emacs-lisp
  (use-package racket-mode
    :ensure t
    :init
    (add-hook 'racket-mode-hook (lambda () (paredit-mode 1))))
#+END_SRC

** Emacs lisp
#+BEGIN_SRC emacs-lisp
  (add-hook 'emacs-lisp-mode-hook (lambda () (paredit-mode 1)))

#+END_SRC
** LaTeX / AucTeX
#+BEGIN_SRC emacs-lisp
(add-hook 'LaTeX-mode-hook 'visual-line-mode)
(add-hook 'LaTeX-mode-hook 'flyspell-mode)
(add-hook 'LaTeX-mode-hook 'LaTeX-math-mode)
(add-hook 'LaTeX-mode-hook 'orgtbl-mode)
;; Compile LaTeX to PDF by default
(add-hook 'TeX-mode-hook '(lambda () (setq TeX-command-default "LaTeXmk")))
(add-hook 'LaTeX-mode-hook '(lambda () (setq compile-command "latexmk -pdf")))
#+END_SRC

** Javascript
#+BEGIN_SRC emacs-lisp
  (use-package nodejs-repl
    :ensure t
    :bind (("C-c C-c" . nodejs-repl-send-region))
    :init
    (setq nodejs-repl-command "nodejs"))

#+END_SRC

** Elixir
#+BEGIN_SRC emacs-lisp
  (defun alchemist-iex-mark-and-send-region ()
    (interactive)
    (mark-paragraph)
    (alchemist-iex-send-region (point) (mark))
    (set-mark-command (point))
    (forward-paragraph))

  (use-package alchemist
    :ensure t
    :bind (("C-c C-c" . alchemist-iex-mark-and-send-region)))
#+END_SRC
** Dockerfile
Dockerfiles are sort of a language, I guess.
#+BEGIN_SRC emacs-lisp
  (use-package dockerfile-mode
    :ensure t)
#+END_SRC
** Restclient
Also a sort-of-a-language language
#+BEGIN_SRC emacs-lisp
  (use-package ob-restclient
    :ensure t)
#+END_SRC
* Magit
#+BEGIN_SRC emacs-lisp
  (use-package magit
    :ensure t)
#+END_SRC
* Github gists
#+BEGIN_SRC emacs-lisp
    (use-package gist
      :ensure t)
#+END_SRC

* OpenPGP / GPG / GNUPG
#+BEGIN_SRC emacs-lisp 
  (setq epg-gpg-program "gpg2")

#+END_SRC
